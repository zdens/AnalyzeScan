<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonetDB</name>
    </assembly>
    <members>
        <member name="T:MonetDB.MonetBulkCopy">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonetDB.MonetBulkCopy.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:MonetDB.MonetBulkCopy.Upload(System.String,System.String,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="reader"></param>
            <param name="schemaName"></param>
        </member>
        <member name="P:MonetDB.MonetBulkCopy.BatchSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.MonetBulkCopy.NotifyAfter">
            <summary>
            
            </summary>
        </member>
        <member name="E:MonetDB.MonetBulkCopy.RowsCopied">
            <summary>
            
            </summary>
        </member>
        <member name="T:MonetDB.MonetDatabase">
            <summary>
            </summary>
        </member>
        <member name="M:MonetDB.MonetDatabase.#ctor(System.String)">
            <summary>
            </summary> 
            <param name="connectionString"></param>
        </member>
        <member name="M:MonetDB.MonetDatabase.DropSchema(System.String)">
            <summary>
            </summary>
            <param name="schemaName"></param>
        </member>
        <member name="M:MonetDB.MonetDatabase.DropTable(System.String,System.String)">
            <summary>
            </summary>
            <param name="schemaName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:MonetDB.MonetDatabase.CreateSchema(System.String)">
            <summary>
            </summary>
            <param name="schemaName"></param>
        </member>
        <member name="M:MonetDB.MonetDatabase.CreateTable(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            </summary>
            <param name="schemaName"></param>
            <param name="tableName"></param>
            <param name="columns"></param>
        </member>
        <member name="M:MonetDB.MonetDatabase.BatchInsert(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Type},System.Object[][])">
            <summary>
            </summary>
            <param name="schemaName"></param>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="values"></param>
        </member>
        <member name="T:MonetDB.OdbcHelper">
            <summary>
            The OdbcHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OdbcClient.
            </summary>
        </member>
        <member name="M:MonetDB.OdbcHelper.AttachParameters(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcParameter[])">
            <summary>
            This method is used to attach array of OdbcParameters to a OdbcCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OdbcParameters tho be added to command</param>
        </member>
        <member name="M:MonetDB.OdbcHelper.AssignParameterValues(System.Data.Odbc.OdbcParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OdbcParameters.
            </summary>
            <param name="commandParameters">array of OdbcParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:MonetDB.OdbcHelper.PrepareCommand(System.Data.Odbc.OdbcCommand,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OdbcCommand to be prepared</param>
            <param name="connection">a valid OdbcConnection, on which to execute this command</param>
            <param name="transaction">a valid OdbcTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns no resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns no resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns no resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns no resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteNonQuery(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns no resultset) against the specified 
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteDataset(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified 
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[],MonetDB.OdbcHelper.OdbcConnectionOwnership)">
            <summary>
            Create and prepare a OdbcCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OdbcConnection, on which to execute this command</param>
            <param name="transaction">a valid OdbcTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OdbcHelper</param>
            <returns>OdbcDataReader containing the results of the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OdbcDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OdbcDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OdbcDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             OdbcDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OdbcDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OdbcDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OdbcDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OdbcDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteReader(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OdbcDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OdbcDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a 1x1 resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a 1x1 resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteScalar(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a 1x1 resultset) against the specified
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcConnection,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified OdbcConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OdbcConnection</param>
            <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OdbcCommand (that returns a resultset and takes no parameters) against the provided OdbcTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcTransaction,System.Data.CommandType,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            Execute a OdbcCommand (that returns a resultset) against the specified OdbcTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new OdbcParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of OdbcParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:MonetDB.OdbcHelper.ExecuteXmlReader(System.Data.Odbc.OdbcTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OdbcCommand (that returns a resultset) against the specified 
            OdbcTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OdbcTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:MonetDB.OdbcHelper.OdbcConnectionOwnership">
            <summary>
            this enum is used to indicate whether the connection was provided by the caller, or created by OdbcHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:MonetDB.OdbcHelper.OdbcConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OdbcHelper</summary>
        </member>
        <member name="F:MonetDB.OdbcHelper.OdbcConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:MonetDB.OdbcHelperParameterCache">
            <summary>
            OdbcHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:MonetDB.OdbcHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run time the appropriate set of OdbcParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:MonetDB.OdbcHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of OdbcParamters to be cached</param>
        </member>
        <member name="M:MonetDB.OdbcHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an array of OdbcParamters</returns>
        </member>
        <member name="M:MonetDB.OdbcHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of OdbcParameters</returns>
        </member>
        <member name="M:MonetDB.OdbcHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OdbcParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OdbcConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of OdbcParameters</returns>
        </member>
        <member name="T:MonetDB.RowsCopiedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonetDB.RowsCopiedEventArgs.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="rowsCopied"></param>
        </member>
        <member name="M:MonetDB.RowsCopiedEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.RowsCopiedEventArgs.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.RowsCopiedEventArgs.RowsCopied">
            <summary>
            
            </summary>
        </member>
        <member name="T:MonetDB.RowsCopiedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MonetDB.SchemaTableInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonetDB.SchemaTableInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="schema"></param>
            <param name="table"></param>
        </member>
        <member name="M:MonetDB.SchemaTableInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MonetDB.SchemaTableInfo.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.SchemaTableInfo.Table">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.SchemaTableInfo.RowsCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:MonetDB.TableColumnInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonetDB.TableColumnInfo.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:MonetDB.TableColumnInfo.Column">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.TableColumnInfo.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonetDB.TableColumnInfo.Nullable">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
